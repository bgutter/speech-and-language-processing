#+TITLE: Section I. Words

* Chapter 2 - Regular Expressions and Automata

** Deterministic Finite State Automata

Implement the deterministic recognizer for finite state automata. This is a tail-recursive adaptation of the pseudocode in figure 2.12.

#+begin_src lisp
  (defstruct (d-recognize/machine (:conc-name nil))
    "Machine for recognizing strings in a language.
states should be a list of states. transition-table should be a nested alist, mapping (current-state, character)
to the singular next state. accept-states should be a list of states, subsetting states, which indicate acceptance
of an input string upon termination."
    states transition-table accept-states)

  (defun d-recognize (tape machine &optional current-state)
    "Deterministic recognizer for finite state automata. machine is an instance of d-recognize/machine, and
tape is a string in machine's alphabet. Returns terminating state if tape is recognized by machine, else
returns nil."
    (let
        ((current-state (or current-state (first (states machine))))) ;; initialize state if needed
      (if (= (length tape) 0)
          (member current-state (accept-states machine))              ;; end of input -- are we in an accept state?
        (let
            ((next-state (cdr-nassoc (transition-table machine)       ;; transition if possible
                                     (list current-state
                                           (elt tape 0)))))
          (and next-state                                             ;; fail if no transition, else recurse using the
               (d-recognize (subseq tape 1) machine next-state))))))  ;; rest of the string and the new state
#+end_src

#+RESULTS:
: D-RECOGNIZE

A test of =d-recognize= using the sheeptalk DFSA in figure 2.10.

#+begin_src lisp
  (defparameter *d-sheeptalk-recognizer* (make-d-recognize/machine
                                          :states '(0 1 2 3 4)
                                          :transition-table '((0 . ((#\b . 1)))
                                                              (1 . ((#\a . 2)))
                                                              (2 . ((#\a . 3)))
                                                              (3 . ((#\a . 3)
                                                                    (#\! . 4))))
                                          :accept-states '(4))
    "A deterministic FSA for recognizing sheeptalk.")

  (defparameter *sheeptalk-positive-testcases* '("baa!" "baaaaaa!" "baaaaaaaaaaaa!")
    "A list of words in the sheeptalk language.")

  (defparameter *sheeptalk-negative-testcases* '("ba!" "Baa!" "baa" "squirtle")
    "A list of words not in the sheeptalk language.")

  (defun d-sheeptalk-p (word)
    "Is word legal sheeptalk? Implemented with DFSA."
    (d-recognize word *d-sheeptalk-recognizer*))

  (assert (every #'d-sheeptalk-p *sheeptalk-positive-testcases*))
  (assert (notany #'d-sheeptalk-p *sheeptalk-negative-testcases*))
#+end_src

#+RESULTS:
: NIL

** Non-Deterministic Finite State Automata

This implements the pseudocode from figure 2.19, with options for either breadth-first-search or depth-first-search.

#+begin_src lisp
  (defparameter *nd-recognize/print-search-order* t
    "Whether to print out the search state each iteration. Useful for understanding breadth- versus depth-
  first-search.")

  (defstruct (nd-recognize/machine (:conc-name nil))
    "Like d-recognize/machine, except that transition-table maps to a list of possible next states, rather than
  a singular value. Additionally, alist paths of the form (current-state 'epsilon) -> next-state-list indicate 'no-cost'
  transitions within the state machine."
    states transition-table accept-states)

  (defun nd-recognize (tape machine &optional (search-strategy 'bfs))
    "Nondeterministic recognizer for finite state automata. Like d-recognize, but here, machine is an instance of
  nd-recognize/machine. Additionally, search strategy may be provided as either 'bfs or 'dfs."
    (nd-recognize/inner (list (list tape machine (first (states machine)))) search-strategy))

  (defun nd-recognize/inner (agenda &optional (search-strategy 'bfs))
    "Recursive inner loop for nd-recognize."
    (assert (> (length agenda) 0))
    (destructuring-bind (tape machine state) (car agenda)
      (when *nd-recognize/print-search-order*
        (format t "~A~%" (car agenda)))
      (if (= (length tape) 0)
          (member state (accept-states machine))
          (let ((new-agenda (nd-recognize/update-agenda
                             (rest agenda)
                             (nd-recognize/generate-new-states tape machine state)
                             search-strategy)))
            (and (> (length new-agenda) 0)
                 (nd-recognize/inner new-agenda))))))

  (defun nd-recognize/generate-new-states (tape machine state)
    "Return an 'agenda' list which represents a list of all possible 'next steps' from the current search state."
    (let*
        ((reachable-epsilon-states (cdr-nassoc (transition-table machine)
                                               (list state
                                                     'epsilon)))
         (reachable-normal-states  (cdr-nassoc (transition-table machine)
                                               (list state
                                                     (elt tape 0)))))
      (union
       (mapcar (lambda (state) (list tape machine state))
               reachable-epsilon-states)
       (mapcar (lambda (state) (list (subseq tape 1) machine state))
               reachable-normal-states)
       :test #'equal)))

  (defun nd-recognize/update-agenda (current-agenda new-items &optional (search-strategy 'bfs))
    "Return an 'agenda list' by combining the given agenda lists, according to search-strategy. Supported values
  include 'bfs and 'dfs"
    (remove-duplicates
     (ccase search-strategy
       (bfs (append current-agenda new-items))
       (dfs (append (reverse new-items) current-agenda)))))
#+end_src

#+RESULTS:
: ND-RECOGNIZE/UPDATE-AGENDA

This tests =nd-recognize= using the NFSA from figure 2.17.

#+begin_src lisp
  (defparameter *nd-sheeptalk-recognizer-1* (make-nd-recognize/machine
                                            :states '(0 1 2 3 4)
                                            :transition-table '((0 . ((#\b . (1))))
                                                                (1 . ((#\a . (2))))
                                                                (2 . ((#\a . (2 3))))
                                                                (3 . ((#\! . (4)))))
                                            :accept-states '(4)))

  (defun nd1-sheeptalk-p (word)
    "Is word legal sheeptalk? Implemented with NFSA #1."
    (nd-recognize word *nd-sheeptalk-recognizer-1*))

  (assert (every #'nd1-sheeptalk-p *sheeptalk-positive-testcases*))
  (assert (notany #'nd1-sheeptalk-p *sheeptalk-negative-testcases*))
#+end_src

#+RESULTS:
: NIL

This tests =nd-recognize= using the epsilon NFSA from figure 2.18.

#+begin_src lisp
  (defparameter *nd-sheeptalk-recognizer-2* (make-nd-recognize/machine
                                :states '(0 1 2 3 4)
                                :transition-table '((0 . ((#\b     . (1))))
                                                    (1 . ((#\a     . (2))))
                                                    (2 . ((#\a     . (3))))
                                                    (3 . ((#\!     . (4))
                                                          (epsilon . (2)))))
                                :accept-states '(4)))

  (defun nd2-sheeptalk-p (word)
    "Is word legal sheeptalk? Implemented with NFSA #2."
    (nd-recognize word *nd-sheeptalk-recognizer-2*))

  (assert (every #'nd2-sheeptalk-p *sheeptalk-positive-testcases*))
  (assert (notany #'nd2-sheeptalk-p *sheeptalk-negative-testcases*))
#+end_src

#+RESULTS:
: NIL

* Chapter 3 - Words and Transducers

** Minimum Edit Distance

This implements the minimum edit distance algorithm in figure 3.25. The distance table produced is transpose to what is shown in the text.

#+begin_src lisp
  (defun min-edit-distance (target source &optional insertion-cost deletion-cost substitution-cost)
    "Calculate the edit distance between two sequences.
  Returns two values -- the distance, and distance table."
    (let
        ;; Distance is a table of zeros, and the cost functions default to
        ;; Levenshtein (1 for insertion/deletion, and 2 for swapping).
        ((distance          (make-array (list (1+ (length target))
                                              (1+ (length source)))
                                        :initial-element 0))
         (insertion-cost    (or insertion-cost (constantly 1)))
         (deletion-cost     (or deletion-cost (constantly 1)))
         (substitution-cost (or substitution-cost
                                (lambda (a b)
                                  (if (equal a b) 0 2)))))

      ;; First row defines the cost of transforming the empty sequence
      ;; into target. This is an accumulation of the insertion cost
      ;; of each item in target.
      (loop for row from 1 to (length target) do
        (setf (aref distance row 0) (+ (aref distance (1- row) 0)
                                     (funcall insertion-cost (elt target (1- row))))))

      ;; First column defines the cost of transforming source into the empty
      ;; sequence. This is an accumulation of the deletion cost for each
      ;; item in source.
      (loop for column from 1 to (length source) do
        (setf (aref distance 0 column) (+ (aref distance 0 (1- column))
                                     (funcall deletion-cost (elt source (1- column))))))

      ;; Work up from our base knowledge; the cost of transforming to/from the
      ;; empty sequence. Each cell represents the cost of transforming the
      ;; substring source[:j] into the substring target[:i]. At the time that
      ;; each cell i, j is calculated, we have *already solved* the subproblems
      ;; for all j' < j and all i' < i.
      ;;
      ;; Capitalizing on that, the cost of transforming source[:j] into target[:i]
      ;; -- ie, distance[i,j] -- is just the cheapest of the following options:
      ;;
      ;;   1. Taking the cheapest transformation of source[:j] to target[:i-1] and
      ;;      simply appending target[i] to finish the transform.
      ;;
      ;;   2. Taking the cheapest transformation of source[:j-1] to target[:i] and
      ;;      simply deleting source[j] to finish the transform.
      ;;
      ;;   3. Taking the cheapest transformation of source[:j-1] to target[:i-1] and
      ;;      swapping source[j] for target[i] to finish the transform.
      ;;
      (loop for row from 1 to (length target) do
           (loop for column from 1 to (length source) do
                (setf (aref distance row column)
                      (min

                       ;; ...if we append target[i]...
                       (+ (aref distance (1- row) column)
                          (funcall insertion-cost (elt target (1- row))))

                       ;; ...or, if we just delete source[j]...
                       (+ (aref distance row (1- column))
                          (funcall deletion-cost (elt source (1- column))))

                       ;; ...or, if we swap source[j] with target[i]...
                       (+ (aref distance (1- row) (1- column))
                          (funcall substitution-cost
                                   (elt source (1- column))
                                   (elt target (1- row))))))))

      ;; Return the final, minimum distance, and the cost table
      (values (aref distance (length target) (length source))
              distance)))
#+end_src

#+RESULTS:
: MIN-EDIT-DISTANCE

#+begin_src lisp :exports both
(multiple-value-list
  (min-edit-distance "intention" "execution"))
#+end_src

#+RESULTS:
#+begin_example
(8
 #2A((0 1 2 3 4 5 6 7 8 9)
     (1 2 3 4 5 6 7 6 7 8)
     (2 3 4 5 6 7 8 7 8 7)
     (3 4 5 6 7 8 7 8 9 8)
     (4 3 4 5 6 7 8 9 10 9)
     (5 4 5 6 7 8 9 10 11 10)
     (6 5 6 7 8 9 8 9 10 11)
     (7 6 7 8 9 10 9 8 9 10)
     (8 7 8 9 10 11 10 9 8 9)
     (9 8 9 10 11 12 11 10 9 8)))
#+end_example
